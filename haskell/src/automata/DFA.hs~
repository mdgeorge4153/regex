module Automata.DFA where

import qualified Data.Set as Set
import qualified Data.Map as Map

import Data.Map (Map, (!))

type Set = Set.Set

data DFA state char =
  DFA { states   :: Set state
      , alphabet :: Set char

      -- | delta :: states x alphabet -> states
      , delta :: Map (state,char) state

      -- | start ∈ states
      , start    :: state

      -- | final ⊆ states
      , final    :: Set state
  }


-- | the extended transition function
deltaHat :: (Ord state, Ord char) =>
            DFA state char ->
            state -> [char] -> state
deltaHat m = foldl (curry (delta m !))

-- | true if the machine accepts the given input
accepts :: (Ord state, Ord char) =>
           DFA state char -> [char] -> Bool
accepts m x = deltaHat m (start m) x `Set.member` (final m)


-- | true if f is a final state of m
isFinal :: (Ord state) =>
           DFA state char -> state -> Bool
isFinal q m = q `Set.member` (final m)

{-- minimizing DFA ------------------------------------------------------------}

modulo :: Ord a => Set a -> (a -> a -> Bool) -> Map a Int
s `modulo` r = snd . Set.foldl (0,Map.empty) 
  where append (maxInd,map) x = case Map.lookup m x of
    | Just n -> n
    | 

minimize :: (Ord state, Ord char) =>
            DFA state char -> DFA (Set state) char
minimize m =
  


different m = memoizeFix2 different'
  where different' different'' q1 q2 = 
       isFinal q1 && not (isFinal q2)
    || isFinal q2 && not (isFinal q1)
    || exists (alphabet m) (\a -> different'' (delta m q1 a) (delta m q2 a))
  


